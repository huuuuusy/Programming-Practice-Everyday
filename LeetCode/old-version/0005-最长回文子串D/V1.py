""" 
@Author: huuuuusy
@GitHub: https://github.com/huuuuusy
系统： Ubuntu 18.04
IDE:  VS Code 1.36
工具： python == 3.7.3
"""

"""
思路：
    解决这类 “最优子结构” 问题，可以考虑使用 “动态规划”：
        1、定义 “状态”；
        2、找到 “状态转移方程”。

    记号说明： 
        下文中，使用记号 s[l, r] 表示原始字符串的一个子串，l、r 分别是区间的左右边界的索引值，使用左闭、右闭区间表示左右边界可以取到。
        举个例子，当 s = 'babad' 时，s[0, 1] = 'ba' ，s[2, 4] = 'bad'。

    1、定义 “状态”，这里 “状态”数组是二维数组。
        dp[l][r] 表示子串 s[l, r]（包括区间左右端点）是否构成回文串，是一个二维布尔型数组。
        即如果子串 s[l, r] 是回文串，那么 dp[l][r] = true。
    2、找到 “状态转移方程”。
        首先，我们很清楚一个事实：
            1、当子串只包含 1 个字符，它一定是回文子串；
            2、当子串包含 2 个以上字符的时候：
                如果 s[l, r] 是一个回文串，例如 “abccba”，那么这个回文串两边各往里面收缩一个字符（如果可以的话）的子串 s[l + 1, r - 1] 也一定是回文串，
                即：如果 dp[l][r] == true 成立，一定有 dp[l + 1][r - 1] = true 成立。
        根据这一点，我们可以知道，给出一个子串 s[l, r] ，如果 s[l] != s[r]，那么这个子串就一定不是回文串。
        如果 s[l] == s[r] 成立，就接着判断 s[l + 1] 与 s[r - 1]，这很像中心扩散法的逆方法。
        事实上，当 s[l] == s[r] 成立的时候，dp[l][r] 的值由 dp[l + 1][r - l] 决定，这一点也不难思考：
            当左右边界字符串相等的时候，整个字符串是否是回文就完全由“原字符串去掉左右边界”的子串是否回文决定。
        但是这里还需要再多考虑一点点：“原字符串去掉左右边界”的子串的边界情况。
            1、当原字符串的元素个数为 3 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 1 个字符，它一定是回文串，故原字符串也一定是回文串；
            2、当原字符串的元素个数为 2 个的时候，如果左右边界相等，那么去掉它们以后，只剩下 0 个字符，显然原字符串也一定是回文串。
        把上面两点归纳一下，只要 s[l + 1, r - 1] 至少包含两个元素，就有必要继续做判断，否则直接根据左右边界是否相等就能得到原字符串的回文性。
        而“s[l + 1, r - 1] 至少包含两个元素”等价于 l + 1 < r - 1，整理得 l - r < -2，或者 r - l > 2。

    综上，如果一个字符串的左右边界相等，以下二者之一成立即可：
        1、去掉左右边界以后的字符串不构成区间，即“ s[l + 1, r - 1] 至少包含两个元素”的反面，即 l - r >= -2，或者 r - l <= 2；
        2、去掉左右边界以后的字符串是回文串，具体说，它的回文性决定了原字符串的回文性。
    于是整理成“状态转移方程”：
        dp[l, r] = (s[l] == s[r] and (l - r >= -2 or dp[l + 1, r - 1]))
    或者
        dp[l, r] = (s[l] == s[r] and (r - l <= 2 or dp[l + 1, r - 1]))
    
    编码实现细节：
        因为要构成子串 l 一定小于等于 r ，我们只关心 “状态”数组“上三角”的那部分取值。
        理解上面的“状态转移方程”中的 (r - l <= 2 or dp[l + 1, r - 1]) 这部分是关键，
        因为 or 是短路运算，因此，如果收缩以后不构成区间，那么就没有必要看继续 dp[l + 1, r - 1] 的取值。
链接：
    https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/
结果：
    执行用时 : 3808 ms, 在所有 Python3 提交中击败了44.03%的用户
    内存消耗 : 22.5 MB, 在所有 Python3 提交中击败了5.28%的用户
"""

class Solution:
    def longestPalindrome(self, s):
        size = len(s)
        if size <= 1:
            return s
        # 二维 dp 问题
        # 状态：dp[l,r]: s[l:r] 包括 l，r ，表示的字符串是不是回文串
        # 设置为 Fales 是为了方便调试，看清楚代码执行流程
        dp = [[False for _ in range(size)] for _ in range(size)]

        # 首先对第一个字符进行读取
        longest_l = 1
        res = s[0]

        # 因为只有 1 个字符的情况在最开始做了判断
        # 左边界一定要比右边界小，因此右边界从 1 开始
        for r in range(1, size):
            for l in range(r):
                # 状态转移方程：如果头尾字符相等并且中间也是回文
                # 在头尾字符相等的前提下，如果收缩以后不构成区间（最多只有 1 个元素），直接返回 True 即可
                # 否则要继续看收缩以后的区间的回文性
                # 重点理解 or 的短路性质在这里的作用
                if s[l] == s[r] and (r - l <= 2 or dp[l + 1][r - 1]): # 为True的条件：1.首尾字符相等2.满足剩下两个条件中的一个：(1)剩下字符不构成区间(2)收缩后的区间是回文区间
                    dp[l][r] = True # 此时区间是回文区间
                    cur_len = r - l + 1
                    if cur_len > longest_l:
                        longest_l = cur_len
                        res = s[l:r + 1] 
            # 调试语句
            #for item in dp:
                 #print(item)
            #print('---')
        return res

if __name__ == "__main__":
    s = "babad"
    answer = Solution().longestPalindrome(s)
    print(answer)
